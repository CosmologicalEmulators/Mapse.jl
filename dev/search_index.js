var documenterSearchIndex = {"docs":
[{"location":"api/#API-reference","page":"API","title":"API reference","text":"","category":"section"},{"location":"api/","page":"API","title":"API","text":"Mapse.LinearPkEmulator\nMapse.get_Pk\nMapse.get_kgrid\nMapse.get_zgrid\nMapse.get_emulator_description\nMapse.load_emulator","category":"page"},{"location":"api/#Mapse.LinearPkEmulator","page":"API","title":"Mapse.LinearPkEmulator","text":"LinearPkEmulator(TrainedEmulator::AbstractTrainedEmulators, kgrid::Array, zgrid::Array,\nInMinMax::Matrix, OutMinMax::Matrix)\n\nThis is the fundamental struct used to obtain the C_ell's from an emulator. It contains:\n\nTrainedEmulator::AbstractTrainedEmulators, the trained emulator\nkgrid::AbstractVector, the k-grid the emulator has been trained on.\nzgrid::AbstractVector, the z-grid the emulator has been trained on.\nInMinMax::AbstractMatrix, the Matrix used for the MinMax normalization of the input features\nOutMinMax::AbstractMatrix, the Matrix used for the MinMax normalization of the output features\nPostprocessing::Function, the Function used for the postprocessing of the NN output\n\n\n\n\n\n","category":"type"},{"location":"api/#Mapse.get_Pk","page":"API","title":"Mapse.get_Pk","text":"getPk(input_params, Pkemu::LinearPkEmulator)\n\nComputes and returns the linear power spectrum on the k-z grid the emulator has been trained on, given input array input_params.\n\n\n\n\n\n","category":"function"},{"location":"api/#Mapse.get_kgrid","page":"API","title":"Mapse.get_kgrid","text":"get_kgrid(PkEmulator::AbstractCℓEmulators)\n\nReturns the k-grid the emulator has been trained on.\n\n\n\n\n\n","category":"function"},{"location":"api/#Mapse.get_zgrid","page":"API","title":"Mapse.get_zgrid","text":"get_zgrid(PkEmulator::AbstractPkEmulators)\n\nReturns the z-grid the emulator has been trained on.\n\n\n\n\n\n","category":"function"},{"location":"api/#AbstractCosmologicalEmulators.get_emulator_description","page":"API","title":"AbstractCosmologicalEmulators.get_emulator_description","text":"get_emulator_description(PkEmulator::AbstractPkEmulators)\n\nPrint on screen the emulator description.\n\n\n\n\n\n","category":"function"},{"location":"api/#Mapse.load_emulator","page":"API","title":"Mapse.load_emulator","text":"load_emulator(path::String, emu_backend::AbstractTrainedEmulators)\n\nLoad the emulator with the files in the folder path, using the backend defined by emu_backend. The following keyword arguments are used to specify the name of the files used to load the emulator:\n\nk_file, default k.npy\nz_file, default z.npy\nweights_file, default weights.npy\ninminmax_file, default inminmax.npy\noutminmax_file, default outminmax.npy\nnn_setup_file, default nn_setup.json\npostprocessing_file, default postprocessing.jl\n\nIf the corresponding file in the folder you are trying to load have different names,  change the default values accordingly.\n\n\n\n\n\n","category":"function"},{"location":"#Capse.jl","page":"Home","title":"Capse.jl","text":"","category":"section"},{"location":"","page":"Home","title":"Home","text":"Mapse.jl is a Julia package designed to emulate the computation of the Linear and Nonlinear Matter Power Spectrum, with a speedup of several orders of magnitude compared to standard codes such as CAMB or CLASS. The core functionalities of Mapse.jl are inherithed by the upstream library AbstractCosmologicalEmulators.jl.","category":"page"},{"location":"#Installation","page":"Home","title":"Installation","text":"","category":"section"},{"location":"","page":"Home","title":"Home","text":"In order to install  Mapse.jl, run on the Julia REPL","category":"page"},{"location":"","page":"Home","title":"Home","text":"using Pkg, Pkg.add(url=\"https://github.com/CosmologicalEmulators/Mapse.jl\")","category":"page"},{"location":"#Usage","page":"Home","title":"Usage","text":"","category":"section"},{"location":"","page":"Home","title":"Home","text":"In order to be able to use Mapse.jl, there are two major steps that need to be performed:","category":"page"},{"location":"","page":"Home","title":"Home","text":"Instantiating the emulators, e.g. initializing the Neural Network, its weights and biases, and the quantities employed in pre and post-processing\nUse the instantiated emulators to retrieve the spectra","category":"page"},{"location":"","page":"Home","title":"Home","text":"In the reminder of this section we are showing how to do this.","category":"page"},{"location":"#Instantiation","page":"Home","title":"Instantiation","text":"","category":"section"},{"location":"","page":"Home","title":"Home","text":"The most direct way to instantiate an official trained emulators is given by the following one-liner","category":"page"},{"location":"","page":"Home","title":"Home","text":"Pk_emu = Mapse.load_emulator(weights_folder);","category":"page"},{"location":"","page":"Home","title":"Home","text":"where weights_folder is the path to the folder containing the files required to build up the network.","category":"page"},{"location":"","page":"Home","title":"Home","text":"It is possible to pass an additional argument to the previous function, which is used to choose between the two NN backend now available:","category":"page"},{"location":"","page":"Home","title":"Home","text":"SimpleChains, which is taylored for small NN running on a CPU\nLux, which can run both on CPUs and GPUs","category":"page"},{"location":"","page":"Home","title":"Home","text":"SimpleChains.jl is faster expecially for small NNs on the CPU. If you wanna use something running on a GPU, you should use Lux.jl, which can be loaded adding an additional argument to the load_emulator function, Capse.LuxEmulator","category":"page"},{"location":"","page":"Home","title":"Home","text":"Pk_emu = Capse.load_emulator(weights_folder, emu = Mapse.LuxEmulator);","category":"page"},{"location":"","page":"Home","title":"Home","text":"Each trained emulator should be shipped with a description within the JSON file. In order to print the description, just run:","category":"page"},{"location":"","page":"Home","title":"Home","text":"Mapse.get_emulator_description(Pk_emu)","category":"page"},{"location":"","page":"Home","title":"Home","text":"warning: Warning\nCosmological parameters must be fed to Mapse.jl with arrays. It is the user responsability to check the right ordering, by reading the output of the get_emulator_description method.","category":"page"},{"location":"","page":"Home","title":"Home","text":"After loading a trained emulator, feed it some input parameters x in order to get the emulated P(kz)'s","category":"page"},{"location":"","page":"Home","title":"Home","text":"x = rand(6) # generate some random input\nMapse.get_Pk(x, Pk_emu) #compute the Pk's","category":"page"},{"location":"","page":"Home","title":"Home","text":"SimpleChains.jl and Lux.jl have almost the same performance and they give the same result up to floating point precision.","category":"page"},{"location":"","page":"Home","title":"Home","text":"These benchmarks have been performed locally, with a 13th Gen Intel® Core™ i7-13700H, using a single core.","category":"page"},{"location":"","page":"Home","title":"Home","text":"Considering that a high-precision settings calculation performed with CAMB on the same machine requires around 60 seconds, Mapse.jl is 5-6 order of magnitudes faster.","category":"page"},{"location":"","page":"Home","title":"Home","text":"warning: Warning\nCurrently, there is a performance issue when using Lux.jl in a multi-threaded scenario. This is something known (see discussion here). In case you want to launch multiple chains locally, the suggested (working) strategy with Lux.jl is to use distributed computing.","category":"page"},{"location":"#Authors","page":"Home","title":"Authors","text":"","category":"section"},{"location":"","page":"Home","title":"Home","text":"Marco Bonici, PostDoctoral researcher at Waterloo Center for Astrophysics","category":"page"},{"location":"#Contributing","page":"Home","title":"Contributing","text":"","category":"section"},{"location":"","page":"Home","title":"Home","text":"Pull requests are welcome. For major changes, please open an issue first to discuss what you would like to change.","category":"page"},{"location":"","page":"Home","title":"Home","text":"Please make sure to update tests as appropriate.","category":"page"},{"location":"#License","page":"Home","title":"License","text":"","category":"section"},{"location":"","page":"Home","title":"Home","text":"Mapse.jl is licensed under the MIT \"Expat\" license; see LICENSE for the full license text.","category":"page"}]
}
